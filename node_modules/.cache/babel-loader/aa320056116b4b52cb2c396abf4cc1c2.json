{"ast":null,"code":"var _jsxFileName = \"I:\\\\ANYcode\\\\react.js\\\\animal-client\\\\src\\\\component\\\\CheckLogin\\\\CheckLoginComponent.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withCookies } from 'react-cookie';\nimport { Modal } from 'antd';\nimport { Redirect } from 'react-router-dom';\nimport { LoginStatus } from '../../api/CheckLoginApis';\n\nconst mapStateToProps = state => {\n  return {\n    propsData: state\n  };\n};\n\nconst warning = () => {\n  Modal.warning({\n    title: 'Loging',\n    content: 'เข้าสู่ะบบก่อนใช้งาน'\n  });\n};\n\nclass CheckLoginComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      propsInput: '/login',\n      employeeLogin: '',\n      redirect: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      cookies\n    } = this.props;\n    let userName = cookies.cookies.user;\n\n    if (userName === undefined) {\n      this.setState({\n        employeeLogin: ''\n      });\n    } else {\n      let userLogin = cookies.get('userName').employee_prefix_description + ' ' + cookies.get('userName').employee_fname + ' ' + cookies.get('userName').employee_lname;\n      this.setState({\n        employeeLogin: userLogin\n      });\n    }\n  }\n\n  async componentWillReceiveProps(input) {\n    const {\n      cookies\n    } = this.props;\n    let token = cookies.cookies.token_cookie;\n    let inputProps = this.state.propsInput;\n\n    const checkFuntion = async () => {\n      if (token === undefined) {\n        this.setState({\n          redirect: true\n        });\n      } else {\n        let loginStatus = await LoginStatus({\n          token\n        }),\n            tokenStat = loginStatus.user[0].expri_stat;\n\n        if (tokenStat === true) {\n          cookies.remove('token_cookie', {\n            path: '/'\n          });\n          cookies.remove('userName', {\n            path: '/'\n          });\n          this.setState({\n            employeeLogin: ''\n          });\n        } else {\n          console.log(cookies.get('userName'));\n          let userLogin = cookies.get('userName').employee_prefix_description + ' ' + cookies.get('userName').employee_fname + ' ' + cookies.get('userName').employee_lname;\n          this.setState({\n            employeeLogin: userLogin\n          });\n        }\n      }\n    };\n\n    if (inputProps !== '/login') {\n      checkFuntion();\n    }\n  }\n\n  render() {\n    const redirect = this.state.redirect;\n\n    if (redirect) {\n      this.setState({\n        redirect: false\n      });\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, this.state.employeeLogin);\n    }\n  }\n\n}\n\nexport default withCookies(connect(mapStateToProps)(CheckLoginComponent));","map":{"version":3,"sources":["I:/ANYcode/react.js/animal-client/src/component/CheckLogin/CheckLoginComponent.jsx"],"names":["React","connect","withCookies","Modal","Redirect","LoginStatus","mapStateToProps","state","propsData","warning","title","content","CheckLoginComponent","Component","constructor","propsInput","employeeLogin","redirect","componentDidMount","cookies","props","userName","user","undefined","setState","userLogin","get","employee_prefix_description","employee_fname","employee_lname","componentWillReceiveProps","input","token","token_cookie","inputProps","checkFuntion","loginStatus","tokenStat","expri_stat","remove","path","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withCookies } from 'react-cookie'\r\nimport { Modal } from 'antd'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { LoginStatus } from '../../api/CheckLoginApis'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        propsData: state\r\n    }\r\n}\r\nconst warning = () => {\r\n    Modal.warning({\r\n        title: 'Loging',\r\n        content: 'เข้าสู่ะบบก่อนใช้งาน',\r\n    })\r\n}\r\n\r\nclass CheckLoginComponent extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            propsInput: '/login',\r\n            employeeLogin: '',\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { cookies } = this.props\r\n        let userName = cookies.cookies.user\r\n        if (userName === undefined) {\r\n            this.setState({\r\n                employeeLogin: ''\r\n            })\r\n        } else {\r\n            let userLogin = cookies.get('userName').employee_prefix_description + ' ' + cookies.get('userName').employee_fname + ' ' + cookies.get('userName').employee_lname\r\n            this.setState({\r\n                employeeLogin: userLogin\r\n            })\r\n        }\r\n    }\r\n\r\n    async componentWillReceiveProps(input) {\r\n        const { cookies } = this.props\r\n        let token = cookies.cookies.token_cookie\r\n\r\n        let inputProps = this.state.propsInput\r\n\r\n        const checkFuntion = async () => {\r\n            if (token === undefined) {\r\n                this.setState({\r\n                    redirect: true\r\n                })\r\n            } else {\r\n                let loginStatus = await LoginStatus({ token }),\r\n                    tokenStat = loginStatus.user[0].expri_stat\r\n                if (tokenStat === true) {\r\n                    cookies.remove('token_cookie', { path: '/' })\r\n                    cookies.remove('userName', { path: '/' })\r\n                    this.setState({\r\n                        employeeLogin: ''\r\n                    })\r\n                } else {\r\n                    console.log(cookies.get('userName'))\r\n                    let userLogin = cookies.get('userName').employee_prefix_description + ' ' + cookies.get('userName').employee_fname + ' ' + cookies.get('userName').employee_lname\r\n                    this.setState({\r\n                        employeeLogin: userLogin\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (inputProps !== '/login') {\r\n            checkFuntion()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const redirect = this.state.redirect\r\n        if (redirect) {\r\n            this.setState({\r\n                redirect: false\r\n            })\r\n            return (<Redirect to='/login' />)\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {this.state.employeeLogin}\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default withCookies(connect(mapStateToProps)(CheckLoginComponent))"]},"metadata":{},"sourceType":"module"}